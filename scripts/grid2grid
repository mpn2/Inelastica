#!/usr/bin/env python
"""
Read DRHO, RHO, VT, VH and TOCH files from siesta and output reasonable file formats.
"""
import sys, profile, glob, os
#sys.path+=['../..']

import numpy as N
import numpy.linalg as LA
import Inelastica.SiestaIO as SIO
import Inelastica.MakeGeom as MG
import Inelastica.PhysicalConstants as PC
from optparse import OptionParser

#####################################################
# Read options
def readOptions():
    usage = "usage: %prog [options] infile.format outfile.format"
    description = """
Convert Siesta grid files to more useful file formats.

infile formats : RHO, DRHO, VT, VH, or TOCH
outfile formats: at the moment only cube
Units: Same units as the Siesta file ... not realy sure ...
TODO: Add more formats and make sure what the units are.

For help use --help!
"""
    parser = OptionParser(usage,description=description)
    (general, args) = parser.parse_args()
    print description
    if len(args)!=2:
        sys.exit('ERROR: You need to supply infile and outfile.\n')
    return general, parser, args

#####################################################
# Main program
def main():    
    # Read arguments
    general, parser, args = readOptions()
    infile, outfile = args[0], args[1]
    informat = os.path.splitext(infile)[-1]
    outformat = os.path.splitext(outfile)[-1]

    path=os.path.split(os.path.abspath(infile))[0]
    fns=glob.glob(path+'/*.XV')
    if len(fns)==1:
        print 'Reading geometry from : %s'%fns[0]
    else:
        print 'Trying to read geometry from %s/RUN.fdf'%path
        fns=[path+'/RUN.fdf']

    geom = MG.Geom(fns[0])
            
    file=open(infile,'r')
    tmp=SIO.ReadFortranBin(file,'d',9)
    cell=N.array([tmp[0:3],tmp[3:6],tmp[6:9]])
    print cell
    Nx,Ny,Nz,Nspin = SIO.ReadFortranBin(file,'i',4)
    
    data=N.zeros((Nx,Ny,Nz),N.float32)
    for iz in range(Nz):
        for iy in range(Ny):
	    data[:,iy,iz]=SIO.ReadFortranBin(file,'f',Nx)
    file.close()
    
    if outformat == '.cube':
        writecube(outfile,data,Nx,Ny,Nz,cell,geom)

################# Write cube file ######################
def writecube(fn,YY,nx,ny,nz,cell,geom):
    """
    Write data to cube file.
    """

    xyz=N.array(geom.xyz)
    anr=geom.anr
    cellB = cell/PC.Bohr2Ang

    foR=file(fn,'w')
    foR.write('Grid data\n%s\n'%fn)
    foR.write('%i %f %f %f\n'% (len(xyz),0,0,0))
    foR.write('%i %f %f %f\n'% (nx,cell[0,0]/nx,cell[0,1]/nx,cell[0,2]/nx))
    foR.write('%i %f %f %f\n'% (ny,cell[1,0]/ny,cell[1,1]/ny,cell[1,2]/nz))
    foR.write('%i %f %f %f\n'% (nz,cell[2,0]/nx,cell[2,1]/ny,cell[2,2]/nz))
    # Write atom coordinates
    for ii in range(len(xyz)):
        foR.write('%i %f '% (anr[ii],0.0))
        tmp=xyz[ii,:]/PC.Bohr2Ang
        foR.write('%f %f %f\n'% (tmp[0],tmp[1],tmp[2]))
    # Write wavefunction
    for ix in range(nx):
        for iy in range(ny):
            for iz in range(nz):
                foR.write('%1.3e\n' % YY[ix,iy,iz])
    foR.close()

#####################################################
# Start it
main()
#profile.run('main()')
